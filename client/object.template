/*
Copyright 2018 Turbine Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package client

// This file was automatically generated by
//   {{.Source}}
// from
//   {{.Template}}.
// Any changes will be lost if this file is regenerated.

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/turbinelabs/api"
	apihttp "github.com/turbinelabs/api/http"
	httperr "github.com/turbinelabs/api/http/error"
	"github.com/turbinelabs/api/queryargs"
	"github.com/turbinelabs/api/service"
)

type http{{.Object.Public}}V1 struct {
	dest apihttp.Endpoint

	requestHandler apihttp.RequestHandler
}

// Construct a new HTTP backed {{.Object.Type}} API implementation.
//
// Parameters:
//	dest - service handling our HTTP requests; cf. NewService
func New{{.Object.Public}}V1(
	dest apihttp.Endpoint,
) (*http{{.Object.Public}}V1, error) {
	return &http{{.Object.Public}}V1{dest, apihttp.NewRequestHandler(dest.Client())}, nil
}

// creates a {{.Object.Private}}-scoped version of the specified path
func (hc *http{{.Object.Public}}V1) path(p string) string {
	return "/v1.0{{.Root}}/{{.Object.Public.SnakeCase}}" + p
}

// Construct a request to the associated {{.Object.Private}} Endpoint with a specified
// method, path, query params, and body.
func (hc *http{{.Object.Public}}V1) request(
	method string,
	path string,
	params apihttp.Params,
	body string,
) (*http.Request, error) {
	rdr := strings.NewReader(body)
	req, err := hc.dest.NewRequest(string(method), hc.path(path), params, rdr)

	if err != nil {
		return nil, err
	}

	return req, nil
}

func (hc *http{{.Object.Public}}V1) get(path string, params apihttp.Params) (*http.Request, error) {
	return hc.request(http.MethodGet, path, params, "")
}

func (hc *http{{.Object.Public}}V1) post(
	path string,
	params apihttp.Params,
	body string,
) (*http.Request, error) {
	return hc.request(http.MethodPost, path, params, body)
}

func (hc *http{{.Object.Public}}V1) put(
	path string,
	params apihttp.Params,
	body string,
) (*http.Request, error) {
	return hc.request(http.MethodPut, path, params, body)
}

func (hc *http{{.Object.Public}}V1) delete(path string, params apihttp.Params) (*http.Request, error) {
	return hc.request(http.MethodDelete, path, params, "")
}

func (hc *http{{.Object.Public}}V1) Index(filters ...service.{{.Object.Public}}Filter) ({{.ObjectArray.Type}}, error) {
	params := apihttp.Params{}

	if filters != nil && len(filters) != 0 {
		filterBytes, err := json.Marshal(filters)
		if err != nil {
			return nil, httperr.New400(
				fmt.Sprintf("unable to encode {{.Object.Private}} filters: %v: %s", filters, err),
				httperr.UnknownUnclassifiedCode,
			)
		}

		params[queryargs.IndexFilters] = string(filterBytes)
	}

	response := make({{.ObjectArray.Type}}, 0, 10)
	reqFn := func() (*http.Request, error) { return hc.get("", params) }

	if err := hc.requestHandler.Do(reqFn, &response); err != nil {
		return nil, err
	}

	return response, nil
}

func (hc *http{{.Object.Public}}V1) Get(key {{.Key.Type}}) ({{.Object.Type}}, error) {
	if key == "" {
		return {{.Object.Type}}{}, httperr.New400(
			"{{.Object.Public}}Key is a required parameter", httperr.ObjectKeyRequiredErrorCode)
	}

	reqFn := func() (*http.Request, error) {
		return hc.get("/"+url.QueryEscape(string(key)), nil)
	}

	response := {{.Object.Type}}{}
	if err := hc.requestHandler.Do(reqFn, &response); err != nil {
		return {{.Object.Type}}{}, err
	}

	return response, nil
}

func mkEncode{{.Object.Public}}Error({{.Object.PrivateVar}} {{.Object.Type}}) *httperr.Error {
	msg := fmt.Sprintf("could not encode provided {{.Object.PrivateVar}}: %+v", {{.Object.PrivateVar}})
	return httperr.New400(msg, httperr.UnknownEncodingCode)
}

func (hc *http{{.Object.Public}}V1) Create(new{{.Object.Public}} {{.Object.Type}}) ({{.Object.Type}}, error) {
	encoded := ""

	if b, err := json.Marshal(new{{.Object.Public}}); err == nil {
		encoded = string(b)
	} else {
		return {{.Object.Type}}{}, mkEncode{{.Object.Public}}Error(new{{.Object.Public}})
	}

	reqFn := func() (*http.Request, error) { return hc.post("", nil, encoded) }
	response := {{.Object.Type}}{}
	if err := hc.requestHandler.Do(reqFn, &response); err != nil {
		return {{.Object.Type}}{}, err
	}

	return response, nil
}

func (hc *http{{.Object.Public}}V1) Modify({{.Object.PrivateVar}} {{.Object.Type}}) ({{.Object.Type}}, error) {
	encoded := ""

	if b, err := json.Marshal({{.Object.PrivateVar}}); err == nil {
		encoded = string(b)
	} else {
		return api.{{.Object.Public}}{}, mkEncode{{.Object.Public}}Error({{.Object.PrivateVar}})
	}

	response := {{.Object.Type}}{}
	reqFn := func() (*http.Request, error) {
		return hc.put("/"+url.QueryEscape(string({{.Object.PrivateVar}}.{{.Key.Public}})), nil, encoded)
	}

	if err := hc.requestHandler.Do(reqFn, &response); err != nil {
		return {{.Object.Type}}{}, err
	}

	return response, nil
}

func (hc *http{{.Object.Public}}V1) Delete(
	{{.Key.PrivateVar}} {{.Key.Type}},
	checksum api.Checksum,
) error {
	reqFn := func() (*http.Request, error) {
		return hc.delete(
			"/"+url.QueryEscape(string({{.Key.PrivateVar}})),
			apihttp.Params{queryargs.Checksum: checksum.Checksum},
		)
	}

	if err := hc.requestHandler.Do(reqFn, nil); err != nil {
		return err
	}

	return nil
}

func (hc *http{{.Object.Public}}V1) Purge(_ {{.Key.Type}}, _ api.Checksum) error {
	return httperr.New501("Purge not implemented", httperr.MiscErrorCode)
}
