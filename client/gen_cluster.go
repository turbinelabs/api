// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/falun/genny

package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/turbinelabs/api"
	httperr "github.com/turbinelabs/api/http/error"
	"github.com/turbinelabs/api/queryargs"
	"github.com/turbinelabs/api/service"
	tbnhttp "github.com/turbinelabs/client/http"
)

type httpClusterV1 struct {
	dest tbnhttp.Endpoint

	requestHandler tbnhttp.RequestHandler
}

// Construct a new HTTP backed Cluster API implementation.
//
// Parameters:
//	dest - service handling our HTTP requests; cf. NewService
//	apiKey - key used to sign our API requests; cf. NewService
//	client - HTTP client used to make these requests; must NOT be nil
func NewClusterV1(
	dest tbnhttp.Endpoint,
	apiKey string,
	client *http.Client,
) (*httpClusterV1, error) {
	if client == nil {
		// Future investigation note: when nil is passed in here the actual failure
		// is way upstream in a curious way; investigating could lend understanding
		// of some cool go internals
		return nil, fmt.Errorf("Attempting to configure Cluster with nil *http.Client")
	}
	return &httpClusterV1{dest, tbnhttp.NewRequestHandler(client, apiKey, apiClientID)}, nil
}

// creates a cluster-scoped version of the specified path
func (hc *httpClusterV1) path(p string) string {
	return "/v1.0/cluster" + p
}

// Construct a request to the associated cluster Endpoint with a specified
// method, path, query params, and body.
func (hc *httpClusterV1) request(
	method httpMethod,
	path string,
	params tbnhttp.Params,
	body string,
) (*http.Request, error) {
	rdr := strings.NewReader(body)
	req, err := http.NewRequest(string(method), hc.dest.Url(hc.path(path), params), rdr)

	if err != nil {
		return nil, err
	}

	return req, nil
}

func (hc *httpClusterV1) get(path string, params tbnhttp.Params) (*http.Request, error) {
	return hc.request(mGET, path, params, "")
}

func (hc *httpClusterV1) post(
	path string,
	params tbnhttp.Params,
	body string,
) (*http.Request, error) {
	return hc.request(mPOST, path, params, body)
}

func (hc *httpClusterV1) put(
	path string,
	params tbnhttp.Params,
	body string,
) (*http.Request, error) {
	return hc.request(mPUT, path, params, body)
}

func (hc *httpClusterV1) delete(path string, params tbnhttp.Params) (*http.Request, error) {
	return hc.request(mDELETE, path, params, "")
}

func (hc *httpClusterV1) Index(filters ...service.ClusterFilter) (api.Clusters, error) {
	params := tbnhttp.Params{}

	if filters != nil && len(filters) != 0 {
		filterBytes, e := json.Marshal(filters)
		if e != nil {
			return nil, httperr.New400(
				fmt.Sprintf("unable to encode cluster filters: %v", filters),
				httperr.UnknownUnclassifiedCode)
		}

		params[queryargs.IndexFilters] = string(filterBytes)
	}

	response := make(api.Clusters, 0, 10)
	reqFn := func() (*http.Request, error) { return hc.get("", params) }

	if err := hc.requestHandler.Do(reqFn, &response); err != nil {
		return nil, err
	}

	return response, nil
}

func (hc *httpClusterV1) Get(key api.ClusterKey) (api.Cluster, error) {
	reqFn := func() (*http.Request, error) {
		return hc.get("/"+url.QueryEscape(string(key)), nil)
	}

	response := api.Cluster{}
	if err := hc.requestHandler.Do(reqFn, &response); err != nil {
		return api.Cluster{}, err
	}

	return response, nil
}

func mkEncodeClusterError(cluster api.Cluster) *httperr.Error {
	msg := fmt.Sprintf("could not encode provided cluster: %+v", cluster)
	return httperr.New400(msg, httperr.UnknownEncodingCode)
}

func (hc *httpClusterV1) Create(newCluster api.Cluster) (api.Cluster, error) {
	encoded := ""

	if b, err := json.Marshal(newCluster); err == nil {
		encoded = string(b)
	} else {
		return api.Cluster{}, mkEncodeClusterError(newCluster)
	}

	reqFn := func() (*http.Request, error) { return hc.post("", nil, encoded) }
	response := api.Cluster{}
	if err := hc.requestHandler.Do(reqFn, &response); err != nil {
		return api.Cluster{}, err
	}

	return response, nil
}

func (hc *httpClusterV1) Modify(cluster api.Cluster) (api.Cluster, error) {
	encoded := ""

	if b, err := json.Marshal(cluster); err == nil {
		encoded = string(b)
	} else {
		return api.Cluster{}, mkEncodeClusterError(cluster)
	}

	response := api.Cluster{}
	reqFn := func() (*http.Request, error) {
		return hc.put("/"+url.QueryEscape(string(cluster.ClusterKey)), nil, encoded)
	}

	if err := hc.requestHandler.Do(reqFn, &response); err != nil {
		return api.Cluster{}, err
	}

	return response, nil
}

func (hc *httpClusterV1) Delete(
	clusterKey api.ClusterKey,
	checksum api.Checksum,
) error {
	reqFn := func() (*http.Request, error) {
		return hc.delete(
			"/"+url.QueryEscape(string(clusterKey)),
			tbnhttp.Params{queryargs.Checksum: checksum.Checksum},
		)
	}

	if err := hc.requestHandler.Do(reqFn, nil); err != nil {
		return err
	}

	return nil
}

func (hc *httpClusterV1) Purge(_ api.ClusterKey, _ api.Checksum) error {
	return httperr.New501("Purge not implemented", httperr.MiscErrorCode)
}
