// Code generated by MockGen. DO NOT EDIT.
// Source: zone.go

package flags

import (
	gomock "github.com/golang/mock/gomock"
	service "github.com/turbinelabs/api/service"
	reflect "reflect"
)

// MockZoneFromFlags is a mock of ZoneFromFlags interface
type MockZoneFromFlags struct {
	ctrl     *gomock.Controller
	recorder *MockZoneFromFlagsMockRecorder
}

// MockZoneFromFlagsMockRecorder is the mock recorder for MockZoneFromFlags
type MockZoneFromFlagsMockRecorder struct {
	mock *MockZoneFromFlags
}

// NewMockZoneFromFlags creates a new mock instance
func NewMockZoneFromFlags(ctrl *gomock.Controller) *MockZoneFromFlags {
	mock := &MockZoneFromFlags{ctrl: ctrl}
	mock.recorder = &MockZoneFromFlagsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZoneFromFlags) EXPECT() *MockZoneFromFlagsMockRecorder {
	return m.recorder
}

// Name mocks base method
func (m *MockZoneFromFlags) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockZoneFromFlagsMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockZoneFromFlags)(nil).Name))
}

// Ref mocks base method
func (m *MockZoneFromFlags) Ref() service.ZoneRef {
	ret := m.ctrl.Call(m, "Ref")
	ret0, _ := ret[0].(service.ZoneRef)
	return ret0
}

// Ref indicates an expected call of Ref
func (mr *MockZoneFromFlagsMockRecorder) Ref() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ref", reflect.TypeOf((*MockZoneFromFlags)(nil).Ref))
}
