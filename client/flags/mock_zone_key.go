// Code generated by MockGen. DO NOT EDIT.
// Source: zone_key.go

// Package flags is a generated GoMock package.
package flags

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/turbinelabs/api"
	service "github.com/turbinelabs/api/service"
	reflect "reflect"
)

// MockZoneKeyFromFlags is a mock of ZoneKeyFromFlags interface
type MockZoneKeyFromFlags struct {
	ctrl     *gomock.Controller
	recorder *MockZoneKeyFromFlagsMockRecorder
}

// MockZoneKeyFromFlagsMockRecorder is the mock recorder for MockZoneKeyFromFlags
type MockZoneKeyFromFlagsMockRecorder struct {
	mock *MockZoneKeyFromFlags
}

// NewMockZoneKeyFromFlags creates a new mock instance
func NewMockZoneKeyFromFlags(ctrl *gomock.Controller) *MockZoneKeyFromFlags {
	mock := &MockZoneKeyFromFlags{ctrl: ctrl}
	mock.recorder = &MockZoneKeyFromFlagsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZoneKeyFromFlags) EXPECT() *MockZoneKeyFromFlagsMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockZoneKeyFromFlags) Get(arg0 service.All) (api.ZoneKey, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(api.ZoneKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockZoneKeyFromFlagsMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockZoneKeyFromFlags)(nil).Get), arg0)
}

// ZoneName mocks base method
func (m *MockZoneKeyFromFlags) ZoneName() string {
	ret := m.ctrl.Call(m, "ZoneName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ZoneName indicates an expected call of ZoneName
func (mr *MockZoneKeyFromFlagsMockRecorder) ZoneName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZoneName", reflect.TypeOf((*MockZoneKeyFromFlags)(nil).ZoneName))
}
