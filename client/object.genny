package client

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/turbinelabs/api"
	apihttp "github.com/turbinelabs/api/http"
	httperr "github.com/turbinelabs/api/http/error"
	"github.com/turbinelabs/api/queryargs"
	"github.com/turbinelabs/api/service"
)

type http__Type__V1 struct {
	dest apihttp.Endpoint

	requestHandler apihttp.RequestHandler
}

// Construct a new HTTP backed __Type__ API implementation.
//
// Parameters:
//	dest - service handling our HTTP requests; cf. NewService
func New__Type__V1(
	dest apihttp.Endpoint,
) (*http__Type__V1, error) {
	return &http__Type__V1{dest, apihttp.NewRequestHandler(dest.Client())}, nil
}

// creates a __type__-scoped version of the specified path
func (hc *http__Type__V1) path(p string) string {
	return "/v1.0__root__/__snake__" + p
}

// Construct a request to the associated __type__ Endpoint with a specified
// method, path, query params, and body.
func (hc *http__Type__V1) request(
	method httpMethod,
	path string,
	params apihttp.Params,
	body string,
) (*http.Request, error) {
	rdr := strings.NewReader(body)
	req, err := hc.dest.NewRequest(string(method), hc.path(path), params, rdr)

	if err != nil {
		return nil, err
	}

	return req, nil
}

func (hc *http__Type__V1) get(path string, params apihttp.Params) (*http.Request, error) {
	return hc.request(mGET, path, params, "")
}

func (hc *http__Type__V1) post(
	path string,
	params apihttp.Params,
	body string,
) (*http.Request, error) {
	return hc.request(mPOST, path, params, body)
}

func (hc *http__Type__V1) put(
	path string,
	params apihttp.Params,
	body string,
) (*http.Request, error) {
	return hc.request(mPUT, path, params, body)
}

func (hc *http__Type__V1) delete(path string, params apihttp.Params) (*http.Request, error) {
	return hc.request(mDELETE, path, params, "")
}

func (hc *http__Type__V1) Index(filters ...service.__Type__Filter) (api.__Coll__, error) {
	params := apihttp.Params{}

	if filters != nil && len(filters) != 0 {
		filterBytes, err := json.Marshal(filters)
		if err != nil {
			return nil, httperr.New400(
				fmt.Sprintf("unable to encode __type__ filters: %v: %s", filters, err),
				httperr.UnknownUnclassifiedCode,
			)
		}

		params[queryargs.IndexFilters] = string(filterBytes)
	}

	response := make(api.__Coll__, 0, 10)
	reqFn := func() (*http.Request, error) { return hc.get("", params) }

	if err := hc.requestHandler.Do(reqFn, &response); err != nil {
		return nil, err
	}

	return response, nil
}

func (hc *http__Type__V1) Get(key api.__Type__Key) (api.__Type__, error) {
	if key == "" {
		return api.__Type__{}, httperr.New400(
			"__Type__Key is a required parameter", httperr.ObjectKeyRequiredErrorCode)
	}

	reqFn := func() (*http.Request, error) {
		return hc.get("/"+url.QueryEscape(string(key)), nil)
	}

	response := api.__Type__{}
	if err := hc.requestHandler.Do(reqFn, &response); err != nil {
		return api.__Type__{}, err
	}

	return response, nil
}

func mkEncode__Type__Error(__type__ api.__Type__) *httperr.Error {
	msg := fmt.Sprintf("could not encode provided __type__: %+v", __type__)
	return httperr.New400(msg, httperr.UnknownEncodingCode)
}

func (hc *http__Type__V1) Create(new__Type__ api.__Type__) (api.__Type__, error) {
	encoded := ""

	if b, err := json.Marshal(new__Type__); err == nil {
		encoded = string(b)
	} else {
		return api.__Type__{}, mkEncode__Type__Error(new__Type__)
	}

	reqFn := func() (*http.Request, error) { return hc.post("", nil, encoded) }
	response := api.__Type__{}
	if err := hc.requestHandler.Do(reqFn, &response); err != nil {
		return api.__Type__{}, err
	}

	return response, nil
}

func (hc *http__Type__V1) Modify(__type__ api.__Type__) (api.__Type__, error) {
	encoded := ""

	if b, err := json.Marshal(__type__); err == nil {
		encoded = string(b)
	} else {
		return api.__Type__{}, mkEncode__Type__Error(__type__)
	}

	response := api.__Type__{}
	reqFn := func() (*http.Request, error) {
		return hc.put("/"+url.QueryEscape(string(__type__.__Type__Key)), nil, encoded)
	}

	if err := hc.requestHandler.Do(reqFn, &response); err != nil {
		return api.__Type__{}, err
	}

	return response, nil
}

func (hc *http__Type__V1) Delete(
	__type__Key api.__Type__Key,
	checksum api.Checksum,
) error {
	reqFn := func() (*http.Request, error) {
		return hc.delete(
			"/"+url.QueryEscape(string(__type__Key)),
			apihttp.Params{queryargs.Checksum: checksum.Checksum},
		)
	}

	if err := hc.requestHandler.Do(reqFn, nil); err != nil {
		return err
	}

	return nil
}

func (hc *http__Type__V1) Purge(_ api.__Type__Key, _ api.Checksum) error {
	return httperr.New501("Purge not implemented", httperr.MiscErrorCode)
}
