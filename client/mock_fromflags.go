/*
Copyright 2017 Turbine Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Automatically generated by MockGen. DO NOT EDIT!
// Source: fromflags.go

package client

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/turbinelabs/api"
	service "github.com/turbinelabs/api/service"
)

// Mock of FromFlags interface
type MockFromFlags struct {
	ctrl     *gomock.Controller
	recorder *_MockFromFlagsRecorder
}

// Recorder for MockFromFlags (not exported)
type _MockFromFlagsRecorder struct {
	mock *MockFromFlags
}

func NewMockFromFlags(ctrl *gomock.Controller) *MockFromFlags {
	mock := &MockFromFlags{ctrl: ctrl}
	mock.recorder = &_MockFromFlagsRecorder{mock}
	return mock
}

func (_m *MockFromFlags) EXPECT() *_MockFromFlagsRecorder {
	return _m.recorder
}

func (_m *MockFromFlags) Make() (service.All, error) {
	ret := _m.ctrl.Call(_m, "Make")
	ret0, _ := ret[0].(service.All)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFromFlagsRecorder) Make() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Make")
}

// Mock of FromFlagsWithZone interface
type MockFromFlagsWithZone struct {
	ctrl     *gomock.Controller
	recorder *_MockFromFlagsWithZoneRecorder
}

// Recorder for MockFromFlagsWithZone (not exported)
type _MockFromFlagsWithZoneRecorder struct {
	mock *MockFromFlagsWithZone
}

func NewMockFromFlagsWithZone(ctrl *gomock.Controller) *MockFromFlagsWithZone {
	mock := &MockFromFlagsWithZone{ctrl: ctrl}
	mock.recorder = &_MockFromFlagsWithZoneRecorder{mock}
	return mock
}

func (_m *MockFromFlagsWithZone) EXPECT() *_MockFromFlagsWithZoneRecorder {
	return _m.recorder
}

func (_m *MockFromFlagsWithZone) Make() (service.All, api.ZoneKey, error) {
	ret := _m.ctrl.Call(_m, "Make")
	ret0, _ := ret[0].(service.All)
	ret1, _ := ret[1].(api.ZoneKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockFromFlagsWithZoneRecorder) Make() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Make")
}
