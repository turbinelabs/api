// Code generated by MockGen. DO NOT EDIT.
// Source: stats.go

package v2

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStatsForwardService is a mock of StatsForwardService interface
type MockStatsForwardService struct {
	ctrl     *gomock.Controller
	recorder *MockStatsForwardServiceMockRecorder
}

// MockStatsForwardServiceMockRecorder is the mock recorder for MockStatsForwardService
type MockStatsForwardServiceMockRecorder struct {
	mock *MockStatsForwardService
}

// NewMockStatsForwardService creates a new mock instance
func NewMockStatsForwardService(ctrl *gomock.Controller) *MockStatsForwardService {
	mock := &MockStatsForwardService{ctrl: ctrl}
	mock.recorder = &MockStatsForwardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatsForwardService) EXPECT() *MockStatsForwardServiceMockRecorder {
	return m.recorder
}

// ForwardV2 mocks base method
func (m *MockStatsForwardService) ForwardV2(arg0 *Payload) (*ForwardResult, error) {
	ret := m.ctrl.Call(m, "ForwardV2", arg0)
	ret0, _ := ret[0].(*ForwardResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForwardV2 indicates an expected call of ForwardV2
func (mr *MockStatsForwardServiceMockRecorder) ForwardV2(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardV2", reflect.TypeOf((*MockStatsForwardService)(nil).ForwardV2), arg0)
}

// MockStatsQueryService is a mock of StatsQueryService interface
type MockStatsQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockStatsQueryServiceMockRecorder
}

// MockStatsQueryServiceMockRecorder is the mock recorder for MockStatsQueryService
type MockStatsQueryServiceMockRecorder struct {
	mock *MockStatsQueryService
}

// NewMockStatsQueryService creates a new mock instance
func NewMockStatsQueryService(ctrl *gomock.Controller) *MockStatsQueryService {
	mock := &MockStatsQueryService{ctrl: ctrl}
	mock.recorder = &MockStatsQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatsQueryService) EXPECT() *MockStatsQueryServiceMockRecorder {
	return m.recorder
}

// QueryV2 mocks base method
func (m *MockStatsQueryService) QueryV2(arg0 *Query) (*QueryResult, error) {
	ret := m.ctrl.Call(m, "QueryV2", arg0)
	ret0, _ := ret[0].(*QueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryV2 indicates an expected call of QueryV2
func (mr *MockStatsQueryServiceMockRecorder) QueryV2(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryV2", reflect.TypeOf((*MockStatsQueryService)(nil).QueryV2), arg0)
}
