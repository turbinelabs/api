/*
Copyright 2018 Turbine Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by {{ .Source }} from {{ .Template }}.
// Any changes will be lost if this file is regenerated.

package {{ .type.Package }}

import (
	"encoding/json"
	"fmt"
)

// {{ .type.Public }} is an enumeration.
type {{.type.Public}} int

// Defined values of {{ .type.Public }}.
const (
{{- range $idx, $elem := .values }}
	{{$elem.Public}} {{- if eq $idx 0 }} {{$.type.Public}} = iota{{end}}
{{- end}}
)

var _dummy = {{.type.Public}}(0)
var _ json.Marshaler = &_dummy
var _ json.Unmarshaler = &_dummy

const (
{{- range .values }}
	str{{.Public}} = "{{.Public.SnakeCase}}"
{{- end}}
)

var {{.type.Private}}Names = [...]string{
{{- range .values}}
	str{{.Public}},
{{- end}}
}

{{if eq .values.Last.Public "Unknown" -}}
const min{{.type.Public }} = {{.type.Public}}(0)

var max{{.type.Public}} = {{.type.Public}}(len({{.type.Private}}Names) - 2)
{{- else -}}
{{- if eq .values.First.Public "Unknown" -}}
const min{{.type.Public}} = {{.type.Public}}(1)
{{else -}}
const min{{.type.Public}} = {{.type.Public}}(0)
{{end}}
var max{{.type.Public}} = {{.type.Public}}(len({{.type.Private}}Names) - 1)
{{end}}
// IsValid returns a boolean indicating whether the given {{.type.Public}} is defined
// (valid) or not.
func IsValid(i {{.type.Public}}) bool {
	return i >= min{{.type.Public}} && i <= max{{.type.Public}}
}

// FromName converts a {{.type.Public}} name into a {{.type.Public}}.
// Returns Unknown if the name is not known. Names are case sensitive.
func FromName(s string) {{.type.Public}} {
	for idx, name := range {{.type.Private}}Names {
		candidate := {{.type.Public}}(idx)
		if IsValid(candidate) && name == s {
			return candidate
		}
	}

	return Unknown
}

// ForEach invokes the given function for each valid {{.type.Public}}.
func ForEach(f func({{.type.Public}})) {
	for i := int(min{{.type.Public}}); i <= int(max{{.type.Public}}); i++ {
		tg := {{.type.Public}}(i)
		f(tg)
	}
}

// String return this {{.type.Public}}'s string representation.
func (i {{.type.Public}}) String() string {
	if !IsValid(i) {
		return fmt.Sprintf("unknown(%d)", i)
	}
	return {{.type.Private}}Names[i]
}

// MarshalJSON converts this {{.type.Public}} to a quoted JSON string. Returns an
// error if the {{.type.Public}} is nil or invalid.
func (i *{{.type.Public}}) MarshalJSON() ([]byte, error) {
	if i == nil {
		return nil, fmt.Errorf("cannot marshal unknown {{.type.Public}} (nil)")
	}

	qt := *i
	if !IsValid(qt) {
		return nil, fmt.Errorf("cannot marshal unknown {{.type.Public}} (%d)", qt)
	}

	name := {{.type.Private}}Names[qt]
	b := make([]byte, 0, len(name)+2)
	b = append(b, '"')
	b = append(b, name...)
	return append(b, '"'), nil
}

// UnmarshalJSON converts a quoted JSON string into a {{.type.Public}}. Returns an
// error if the receiver is nil, the JSON is not a quoted string, or if the
// string does not represent a valid {{.type.Public}}. Otherwise, the receiver's value
// is set to the {{.type.Public}} represented by the string.
func (i *{{.type.Public}}) UnmarshalJSON(bytes []byte) error {
	if i == nil {
		return fmt.Errorf("cannot unmarshal into nil {{.type.Public}}")
	}

	length := len(bytes)
	if length <= 2 || bytes[0] != '"' || bytes[length-1] != '"' {
		return fmt.Errorf("cannot unmarshal invalid JSON: %q", string(bytes))
	}

	unmarshalName := string(bytes[1 : length-1])

	qt := FromName(unmarshalName)
	if qt == Unknown {
		return fmt.Errorf(
			"cannot unmarshal unknown {{.type.Public}} %q",
			unmarshalName,
		)
	}

	*i = qt
	return nil
}

// UnmarshalForm converts a string into a {{.type.Public}}. Returns an error if the
// receiver is nil or if the string does not represent a valid {{.type.Public}}.
// Otherwise, the receiver's value is set to the {{.type.Public}} represented by the
// string.
func (i *{{.type.Public}}) UnmarshalForm(value string) error {
	if i == nil {
		return fmt.Errorf("cannot unmarshal into nil {{.type.Public}}")
	}

	qt := FromName(value)
	if qt == Unknown {
		return fmt.Errorf("cannot unmarshal unknown {{.type.Public}} %q", value)
	}

	*i = qt
	return nil
}
