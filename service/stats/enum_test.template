/*
Copyright 2018 Turbine Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by {{.Source}} from {{.Template}}.
// Any changes will be lost if this file is regenerated.

package {{.type.Package}}

import (
	"encoding/json"
	"fmt"
	"testing"

	"github.com/turbinelabs/test/assert"
)

{{$testVal := .values.At 1 -}}

type testStruct struct {
	{{.type.Public}} {{.type.Public}} `json:"{{.type.Public.SnakeCase}}"`
}

func assertHasAllValues(t testing.TB, i interface{}) {
	mappedValues := map[{{.type.Public}}]struct{}{}

	switch m := i.(type) {
	case map[{{.type.Public}}]string:
		for qt := range m {
			mappedValues[qt] = struct{}{}
		}
	case map[string]{{.type.Public}}:
		for _, qt := range m {
			mappedValues[qt] = struct{}{}
		}
	default:
		t.Fatalf("cannot validate type %T", i)
		return
	}

	ForEach(func(v {{.type.Public}}) {
		assert.Group(
			fmt.Sprintf("{{.type.Public}} %s", v.String()),
                        t,
                        func(g *assert.G) {
				_, ok := mappedValues[v]
				assert.True(g, ok)
			},
		)
	})
}

func Test{{.type.Public}}String(t *testing.T) {
	assert.Equal(
		t,
		{{$testVal.Public}}.String(),
		"{{$testVal.Public.SnakeCase}}",
	)
	assert.MatchesRegex(t, Unknown.String(), `^unknown\([0-9]+\)$`)
	assert.Equal(t, {{.type.Public}}(100).String(), "unknown(100)")
}

func TestIsValid(t *testing.T) {
	invalid := []{{.type.Public}}{
		{{.type.Public}}(min{{.type.Public}} - 1),
		{{.type.Public}}(max{{.type.Public}} + 1),
	}

	for _, qt := range invalid {
		assert.False(t, IsValid(qt))
	}

	ForEach(func(qt {{.type.Public}}) {
		assert.True(t, IsValid(qt))
	})
}

func TestFromName(t *testing.T) {
	validValues := map[{{.type.Public}}]string{
{{- range .values -}}
{{- if ne .Public "Unknown"}}
		{{.Public}}: str{{.Public}},
{{- end -}}
{{- end}}
	}
	assertHasAllValues(t, validValues)

	for expectedQt, name := range validValues {
		qt := FromName(name)
		assert.Equal(t, qt, expectedQt)
	}

	invalidValues := []string{"bob", "unknown", "1"}

	for _, name := range invalidValues {
		qt := FromName(name)
		assert.Equal(t, qt, Unknown)
	}
}

func Test{{.type.Public}}MarshalJSON(t *testing.T) {
	vals := map[{{.type.Public}}]string{
{{- range .values -}}
{{- if ne .Public "Unknown"}}
		{{.Public}}: str{{.Public}},
{{- end -}}
{{- end}}
	}
	assertHasAllValues(t, vals)

	for v, name := range vals {
		bytes, err := v.MarshalJSON()
		assert.Nil(t, err)
		expected := []byte(fmt.Sprintf(`"%s"`, name))
		assert.DeepEqual(t, bytes, expected)
	}
}

func Test{{.type.Public}}MarshalJSONUnknown(t *testing.T) {
	unknownValues := []{{.type.Public}}{
		Unknown,
		{{.type.Public}}(max{{.type.Public}} + 1),
	}

	for _, unknown{{.type.Public}} := range unknownValues {
		bytes, err := unknown{{.type.Public}}.MarshalJSON()
		assert.Nil(t, bytes)
		assert.ErrorContains(t, err, "cannot marshal unknown {{.type.Public}}")
	}
}

func Test{{.type.Public}}MarshalJSONNil(t *testing.T) {
	var v *{{.type.Public}}

	bytes, err := v.MarshalJSON()
	assert.ErrorContains(t, err, "cannot marshal unknown")
	assert.Nil(t, bytes)
}

func Test{{.type.Public}}UnmarshalJSON(t *testing.T) {
	quoted := func(s string) string {
		return fmt.Sprintf(`"%s"`, s)
	}

	vals := map[string]{{.type.Public}}{
{{- range .values -}}
{{- if ne .Public "Unknown"}}
		quoted(str{{.Public}}): {{.Public}},
{{- end -}}
{{- end}}
	}
	assertHasAllValues(t, vals)

	for data, expected := range vals {
		var v {{.type.Public}}

		err := v.UnmarshalJSON([]byte(data))
		assert.Nil(t, err)
		assert.Equal(t, v, expected)
	}
}

func Test{{.type.Public}}UnmarshalJSONUnknown(t *testing.T) {
	unknownVals := []string{`"unknown"`, `"nope"`}

	for _, unknownName := range unknownVals {
		var v {{.type.Public}}

		err := v.UnmarshalJSON([]byte(unknownName))
		assert.ErrorContains(t, err, "cannot unmarshal unknown")
	}
}

func Test{{.type.Public}}UnmarshalJSONNil(t *testing.T) {
	var v *{{.type.Public}}

	err := v.UnmarshalJSON([]byte(`"{{$testVal.Public.SnakeCase}}"`))
	assert.ErrorContains(t, err, "cannot unmarshal into nil {{.type.Public}}")
}

func Test{{.type.Public}}UnmarshalJSONInvalid(t *testing.T) {
	invalidNames := []string{``, `"`, `x`, `xx`, `"x`, `x"`, `'something'`}

	for _, invalidName := range invalidNames {
		var v {{.type.Public}}

		err := v.UnmarshalJSON([]byte(invalidName))
		assert.ErrorContains(t, err, "cannot unmarshal invalid JSON")
	}
}

func Test{{.type.Public}}UnmarshalForm(t *testing.T) {
	vals := map[string]{{.type.Public}}{
{{- range .values -}}
{{- if ne .Public "Unknown"}}
		str{{.Public}}: {{.Public}},
{{- end -}}
{{- end}}
	}
	assertHasAllValues(t, vals)

	for data, expected := range vals {
		var v {{.type.Public}}

		err := v.UnmarshalForm(data)
		assert.Nil(t, err)
		assert.Equal(t, v, expected)
	}
}

func Test{{.type.Public}}UnmarshalFormUnknown(t *testing.T) {
	unknownNames := []string{`unknown`, `nope`}

	for _, unknownName := range unknownNames {
		var v {{.type.Public}}

		err := v.UnmarshalForm(unknownName)
		assert.ErrorContains(t, err, "cannot unmarshal unknown {{.type.Public}}")
	}
}

func Test{{.type.Public}}UnmarshalFormNil(t *testing.T) {
	var v *{{.type.Public}}

	err := v.UnmarshalForm(`{{$testVal.Public.SnakeCase}}`)
	assert.ErrorContains(t, err, "cannot unmarshal into nil {{.type.Public}}")
}

func Test{{.type.Public}}RoundTripStruct(t *testing.T) {
	expected := testStruct{ {{- $testVal.Public -}} }

	bytes, err := json.Marshal(&expected)
	assert.Nil(t, err)
	assert.NonNil(t, bytes)
	assert.Equal(
		t,
		 string(bytes),
		`{"{{.type.Public.SnakeCase}}":"{{$testVal.Public.SnakeCase}}"}`,
	)

	var ts testStruct
	err = json.Unmarshal(bytes, &ts)
	assert.Nil(t, err)
	assert.Equal(t, ts, expected)
}
