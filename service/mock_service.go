/*
Copyright 2017 Turbine Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Automatically generated by MockGen. DO NOT EDIT!
// Source: service.go

package service

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/turbinelabs/api"
)

// Mock of All interface
type MockAll struct {
	ctrl     *gomock.Controller
	recorder *_MockAllRecorder
}

// Recorder for MockAll (not exported)
type _MockAllRecorder struct {
	mock *MockAll
}

func NewMockAll(ctrl *gomock.Controller) *MockAll {
	mock := &MockAll{ctrl: ctrl}
	mock.recorder = &_MockAllRecorder{mock}
	return mock
}

func (_m *MockAll) EXPECT() *_MockAllRecorder {
	return _m.recorder
}

func (_m *MockAll) Cluster() Cluster {
	ret := _m.ctrl.Call(_m, "Cluster")
	ret0, _ := ret[0].(Cluster)
	return ret0
}

func (_mr *_MockAllRecorder) Cluster() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Cluster")
}

func (_m *MockAll) Domain() Domain {
	ret := _m.ctrl.Call(_m, "Domain")
	ret0, _ := ret[0].(Domain)
	return ret0
}

func (_mr *_MockAllRecorder) Domain() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Domain")
}

func (_m *MockAll) SharedRules() SharedRules {
	ret := _m.ctrl.Call(_m, "SharedRules")
	ret0, _ := ret[0].(SharedRules)
	return ret0
}

func (_mr *_MockAllRecorder) SharedRules() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SharedRules")
}

func (_m *MockAll) Route() Route {
	ret := _m.ctrl.Call(_m, "Route")
	ret0, _ := ret[0].(Route)
	return ret0
}

func (_mr *_MockAllRecorder) Route() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Route")
}

func (_m *MockAll) Proxy() Proxy {
	ret := _m.ctrl.Call(_m, "Proxy")
	ret0, _ := ret[0].(Proxy)
	return ret0
}

func (_mr *_MockAllRecorder) Proxy() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Proxy")
}

func (_m *MockAll) Zone() Zone {
	ret := _m.ctrl.Call(_m, "Zone")
	ret0, _ := ret[0].(Zone)
	return ret0
}

func (_mr *_MockAllRecorder) Zone() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Zone")
}

func (_m *MockAll) History() History {
	ret := _m.ctrl.Call(_m, "History")
	ret0, _ := ret[0].(History)
	return ret0
}

func (_mr *_MockAllRecorder) History() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "History")
}

// Mock of Cluster interface
type MockCluster struct {
	ctrl     *gomock.Controller
	recorder *_MockClusterRecorder
}

// Recorder for MockCluster (not exported)
type _MockClusterRecorder struct {
	mock *MockCluster
}

func NewMockCluster(ctrl *gomock.Controller) *MockCluster {
	mock := &MockCluster{ctrl: ctrl}
	mock.recorder = &_MockClusterRecorder{mock}
	return mock
}

func (_m *MockCluster) EXPECT() *_MockClusterRecorder {
	return _m.recorder
}

func (_m *MockCluster) Index(filters ...ClusterFilter) (api.Clusters, error) {
	_s := []interface{}{}
	for _, _x := range filters {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Index", _s...)
	ret0, _ := ret[0].(api.Clusters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClusterRecorder) Index(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Index", arg0...)
}

func (_m *MockCluster) Get(clusterKey api.ClusterKey) (api.Cluster, error) {
	ret := _m.ctrl.Call(_m, "Get", clusterKey)
	ret0, _ := ret[0].(api.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClusterRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockCluster) Create(cluster api.Cluster) (api.Cluster, error) {
	ret := _m.ctrl.Call(_m, "Create", cluster)
	ret0, _ := ret[0].(api.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClusterRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockCluster) Modify(cluster api.Cluster) (api.Cluster, error) {
	ret := _m.ctrl.Call(_m, "Modify", cluster)
	ret0, _ := ret[0].(api.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClusterRecorder) Modify(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Modify", arg0)
}

func (_m *MockCluster) Delete(clusterKey api.ClusterKey, checksum api.Checksum) error {
	ret := _m.ctrl.Call(_m, "Delete", clusterKey, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClusterRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}

func (_m *MockCluster) AddInstance(clusterKey api.ClusterKey, checksum api.Checksum, instance api.Instance) (api.Cluster, error) {
	ret := _m.ctrl.Call(_m, "AddInstance", clusterKey, checksum, instance)
	ret0, _ := ret[0].(api.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClusterRecorder) AddInstance(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddInstance", arg0, arg1, arg2)
}

func (_m *MockCluster) RemoveInstance(clusterKey api.ClusterKey, checksum api.Checksum, instance api.Instance) (api.Cluster, error) {
	ret := _m.ctrl.Call(_m, "RemoveInstance", clusterKey, checksum, instance)
	ret0, _ := ret[0].(api.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClusterRecorder) RemoveInstance(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveInstance", arg0, arg1, arg2)
}

// Mock of Domain interface
type MockDomain struct {
	ctrl     *gomock.Controller
	recorder *_MockDomainRecorder
}

// Recorder for MockDomain (not exported)
type _MockDomainRecorder struct {
	mock *MockDomain
}

func NewMockDomain(ctrl *gomock.Controller) *MockDomain {
	mock := &MockDomain{ctrl: ctrl}
	mock.recorder = &_MockDomainRecorder{mock}
	return mock
}

func (_m *MockDomain) EXPECT() *_MockDomainRecorder {
	return _m.recorder
}

func (_m *MockDomain) Index(filters ...DomainFilter) (api.Domains, error) {
	_s := []interface{}{}
	for _, _x := range filters {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Index", _s...)
	ret0, _ := ret[0].(api.Domains)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDomainRecorder) Index(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Index", arg0...)
}

func (_m *MockDomain) Get(domainKey api.DomainKey) (api.Domain, error) {
	ret := _m.ctrl.Call(_m, "Get", domainKey)
	ret0, _ := ret[0].(api.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDomainRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockDomain) Create(domain api.Domain) (api.Domain, error) {
	ret := _m.ctrl.Call(_m, "Create", domain)
	ret0, _ := ret[0].(api.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDomainRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockDomain) Modify(domain api.Domain) (api.Domain, error) {
	ret := _m.ctrl.Call(_m, "Modify", domain)
	ret0, _ := ret[0].(api.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDomainRecorder) Modify(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Modify", arg0)
}

func (_m *MockDomain) Delete(domainKey api.DomainKey, checksum api.Checksum) error {
	ret := _m.ctrl.Call(_m, "Delete", domainKey, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDomainRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}

// Mock of Proxy interface
type MockProxy struct {
	ctrl     *gomock.Controller
	recorder *_MockProxyRecorder
}

// Recorder for MockProxy (not exported)
type _MockProxyRecorder struct {
	mock *MockProxy
}

func NewMockProxy(ctrl *gomock.Controller) *MockProxy {
	mock := &MockProxy{ctrl: ctrl}
	mock.recorder = &_MockProxyRecorder{mock}
	return mock
}

func (_m *MockProxy) EXPECT() *_MockProxyRecorder {
	return _m.recorder
}

func (_m *MockProxy) Index(filters ...ProxyFilter) (api.Proxies, error) {
	_s := []interface{}{}
	for _, _x := range filters {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Index", _s...)
	ret0, _ := ret[0].(api.Proxies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProxyRecorder) Index(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Index", arg0...)
}

func (_m *MockProxy) Get(proxyKey api.ProxyKey) (api.Proxy, error) {
	ret := _m.ctrl.Call(_m, "Get", proxyKey)
	ret0, _ := ret[0].(api.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProxyRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockProxy) Create(proxy api.Proxy) (api.Proxy, error) {
	ret := _m.ctrl.Call(_m, "Create", proxy)
	ret0, _ := ret[0].(api.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProxyRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockProxy) Modify(proxy api.Proxy) (api.Proxy, error) {
	ret := _m.ctrl.Call(_m, "Modify", proxy)
	ret0, _ := ret[0].(api.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProxyRecorder) Modify(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Modify", arg0)
}

func (_m *MockProxy) Delete(proxyKey api.ProxyKey, checksum api.Checksum) error {
	ret := _m.ctrl.Call(_m, "Delete", proxyKey, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockProxyRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}

// Mock of SharedRules interface
type MockSharedRules struct {
	ctrl     *gomock.Controller
	recorder *_MockSharedRulesRecorder
}

// Recorder for MockSharedRules (not exported)
type _MockSharedRulesRecorder struct {
	mock *MockSharedRules
}

func NewMockSharedRules(ctrl *gomock.Controller) *MockSharedRules {
	mock := &MockSharedRules{ctrl: ctrl}
	mock.recorder = &_MockSharedRulesRecorder{mock}
	return mock
}

func (_m *MockSharedRules) EXPECT() *_MockSharedRulesRecorder {
	return _m.recorder
}

func (_m *MockSharedRules) Index(filters ...SharedRulesFilter) (api.SharedRulesSlice, error) {
	_s := []interface{}{}
	for _, _x := range filters {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Index", _s...)
	ret0, _ := ret[0].(api.SharedRulesSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSharedRulesRecorder) Index(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Index", arg0...)
}

func (_m *MockSharedRules) Get(sharedRulesKey api.SharedRulesKey) (api.SharedRules, error) {
	ret := _m.ctrl.Call(_m, "Get", sharedRulesKey)
	ret0, _ := ret[0].(api.SharedRules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSharedRulesRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockSharedRules) Create(route api.SharedRules) (api.SharedRules, error) {
	ret := _m.ctrl.Call(_m, "Create", route)
	ret0, _ := ret[0].(api.SharedRules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSharedRulesRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockSharedRules) Modify(route api.SharedRules) (api.SharedRules, error) {
	ret := _m.ctrl.Call(_m, "Modify", route)
	ret0, _ := ret[0].(api.SharedRules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSharedRulesRecorder) Modify(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Modify", arg0)
}

func (_m *MockSharedRules) Delete(sharedRulesKey api.SharedRulesKey, checksum api.Checksum) error {
	ret := _m.ctrl.Call(_m, "Delete", sharedRulesKey, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSharedRulesRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}

// Mock of Route interface
type MockRoute struct {
	ctrl     *gomock.Controller
	recorder *_MockRouteRecorder
}

// Recorder for MockRoute (not exported)
type _MockRouteRecorder struct {
	mock *MockRoute
}

func NewMockRoute(ctrl *gomock.Controller) *MockRoute {
	mock := &MockRoute{ctrl: ctrl}
	mock.recorder = &_MockRouteRecorder{mock}
	return mock
}

func (_m *MockRoute) EXPECT() *_MockRouteRecorder {
	return _m.recorder
}

func (_m *MockRoute) Index(filters ...RouteFilter) (api.Routes, error) {
	_s := []interface{}{}
	for _, _x := range filters {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Index", _s...)
	ret0, _ := ret[0].(api.Routes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRouteRecorder) Index(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Index", arg0...)
}

func (_m *MockRoute) Get(routeKey api.RouteKey) (api.Route, error) {
	ret := _m.ctrl.Call(_m, "Get", routeKey)
	ret0, _ := ret[0].(api.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRouteRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockRoute) Create(route api.Route) (api.Route, error) {
	ret := _m.ctrl.Call(_m, "Create", route)
	ret0, _ := ret[0].(api.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRouteRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockRoute) Modify(route api.Route) (api.Route, error) {
	ret := _m.ctrl.Call(_m, "Modify", route)
	ret0, _ := ret[0].(api.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRouteRecorder) Modify(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Modify", arg0)
}

func (_m *MockRoute) Delete(routeKey api.RouteKey, checksum api.Checksum) error {
	ret := _m.ctrl.Call(_m, "Delete", routeKey, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRouteRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}

// Mock of Zone interface
type MockZone struct {
	ctrl     *gomock.Controller
	recorder *_MockZoneRecorder
}

// Recorder for MockZone (not exported)
type _MockZoneRecorder struct {
	mock *MockZone
}

func NewMockZone(ctrl *gomock.Controller) *MockZone {
	mock := &MockZone{ctrl: ctrl}
	mock.recorder = &_MockZoneRecorder{mock}
	return mock
}

func (_m *MockZone) EXPECT() *_MockZoneRecorder {
	return _m.recorder
}

func (_m *MockZone) Index(filters ...ZoneFilter) (api.Zones, error) {
	_s := []interface{}{}
	for _, _x := range filters {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Index", _s...)
	ret0, _ := ret[0].(api.Zones)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockZoneRecorder) Index(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Index", arg0...)
}

func (_m *MockZone) Get(zoneKey api.ZoneKey) (api.Zone, error) {
	ret := _m.ctrl.Call(_m, "Get", zoneKey)
	ret0, _ := ret[0].(api.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockZoneRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockZone) Create(zone api.Zone) (api.Zone, error) {
	ret := _m.ctrl.Call(_m, "Create", zone)
	ret0, _ := ret[0].(api.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockZoneRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockZone) Modify(zone api.Zone) (api.Zone, error) {
	ret := _m.ctrl.Call(_m, "Modify", zone)
	ret0, _ := ret[0].(api.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockZoneRecorder) Modify(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Modify", arg0)
}

func (_m *MockZone) Delete(zoneKey api.ZoneKey, checksum api.Checksum) error {
	ret := _m.ctrl.Call(_m, "Delete", zoneKey, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockZoneRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}
