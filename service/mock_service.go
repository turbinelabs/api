// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

package service

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/turbinelabs/api"
	reflect "reflect"
)

// MockAll is a mock of All interface
type MockAll struct {
	ctrl     *gomock.Controller
	recorder *MockAllMockRecorder
}

// MockAllMockRecorder is the mock recorder for MockAll
type MockAllMockRecorder struct {
	mock *MockAll
}

// NewMockAll creates a new mock instance
func NewMockAll(ctrl *gomock.Controller) *MockAll {
	mock := &MockAll{ctrl: ctrl}
	mock.recorder = &MockAllMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAll) EXPECT() *MockAllMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockAll) Cluster() Cluster {
	ret := m.ctrl.Call(m, "Cluster")
	ret0, _ := ret[0].(Cluster)
	return ret0
}

// Cluster indicates an expected call of Cluster
func (mr *MockAllMockRecorder) Cluster() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockAll)(nil).Cluster))
}

// Domain mocks base method
func (m *MockAll) Domain() Domain {
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(Domain)
	return ret0
}

// Domain indicates an expected call of Domain
func (mr *MockAllMockRecorder) Domain() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockAll)(nil).Domain))
}

// SharedRules mocks base method
func (m *MockAll) SharedRules() SharedRules {
	ret := m.ctrl.Call(m, "SharedRules")
	ret0, _ := ret[0].(SharedRules)
	return ret0
}

// SharedRules indicates an expected call of SharedRules
func (mr *MockAllMockRecorder) SharedRules() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharedRules", reflect.TypeOf((*MockAll)(nil).SharedRules))
}

// Route mocks base method
func (m *MockAll) Route() Route {
	ret := m.ctrl.Call(m, "Route")
	ret0, _ := ret[0].(Route)
	return ret0
}

// Route indicates an expected call of Route
func (mr *MockAllMockRecorder) Route() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockAll)(nil).Route))
}

// Proxy mocks base method
func (m *MockAll) Proxy() Proxy {
	ret := m.ctrl.Call(m, "Proxy")
	ret0, _ := ret[0].(Proxy)
	return ret0
}

// Proxy indicates an expected call of Proxy
func (mr *MockAllMockRecorder) Proxy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proxy", reflect.TypeOf((*MockAll)(nil).Proxy))
}

// Zone mocks base method
func (m *MockAll) Zone() Zone {
	ret := m.ctrl.Call(m, "Zone")
	ret0, _ := ret[0].(Zone)
	return ret0
}

// Zone indicates an expected call of Zone
func (mr *MockAllMockRecorder) Zone() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zone", reflect.TypeOf((*MockAll)(nil).Zone))
}

// History mocks base method
func (m *MockAll) History() History {
	ret := m.ctrl.Call(m, "History")
	ret0, _ := ret[0].(History)
	return ret0
}

// History indicates an expected call of History
func (mr *MockAllMockRecorder) History() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockAll)(nil).History))
}

// MockCluster is a mock of Cluster interface
type MockCluster struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMockRecorder
}

// MockClusterMockRecorder is the mock recorder for MockCluster
type MockClusterMockRecorder struct {
	mock *MockCluster
}

// NewMockCluster creates a new mock instance
func NewMockCluster(ctrl *gomock.Controller) *MockCluster {
	mock := &MockCluster{ctrl: ctrl}
	mock.recorder = &MockClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCluster) EXPECT() *MockClusterMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *MockCluster) Index(filters ...ClusterFilter) (api.Clusters, error) {
	varargs := []interface{}{}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Index", varargs...)
	ret0, _ := ret[0].(api.Clusters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index
func (mr *MockClusterMockRecorder) Index(filters ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockCluster)(nil).Index), filters...)
}

// Get mocks base method
func (m *MockCluster) Get(clusterKey api.ClusterKey) (api.Cluster, error) {
	ret := m.ctrl.Call(m, "Get", clusterKey)
	ret0, _ := ret[0].(api.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClusterMockRecorder) Get(clusterKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCluster)(nil).Get), clusterKey)
}

// Create mocks base method
func (m *MockCluster) Create(cluster api.Cluster) (api.Cluster, error) {
	ret := m.ctrl.Call(m, "Create", cluster)
	ret0, _ := ret[0].(api.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockClusterMockRecorder) Create(cluster interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCluster)(nil).Create), cluster)
}

// Modify mocks base method
func (m *MockCluster) Modify(cluster api.Cluster) (api.Cluster, error) {
	ret := m.ctrl.Call(m, "Modify", cluster)
	ret0, _ := ret[0].(api.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Modify indicates an expected call of Modify
func (mr *MockClusterMockRecorder) Modify(cluster interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockCluster)(nil).Modify), cluster)
}

// Delete mocks base method
func (m *MockCluster) Delete(clusterKey api.ClusterKey, checksum api.Checksum) error {
	ret := m.ctrl.Call(m, "Delete", clusterKey, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockClusterMockRecorder) Delete(clusterKey, checksum interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCluster)(nil).Delete), clusterKey, checksum)
}

// AddInstance mocks base method
func (m *MockCluster) AddInstance(clusterKey api.ClusterKey, checksum api.Checksum, instance api.Instance) (api.Cluster, error) {
	ret := m.ctrl.Call(m, "AddInstance", clusterKey, checksum, instance)
	ret0, _ := ret[0].(api.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInstance indicates an expected call of AddInstance
func (mr *MockClusterMockRecorder) AddInstance(clusterKey, checksum, instance interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInstance", reflect.TypeOf((*MockCluster)(nil).AddInstance), clusterKey, checksum, instance)
}

// RemoveInstance mocks base method
func (m *MockCluster) RemoveInstance(clusterKey api.ClusterKey, checksum api.Checksum, instance api.Instance) (api.Cluster, error) {
	ret := m.ctrl.Call(m, "RemoveInstance", clusterKey, checksum, instance)
	ret0, _ := ret[0].(api.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveInstance indicates an expected call of RemoveInstance
func (mr *MockClusterMockRecorder) RemoveInstance(clusterKey, checksum, instance interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInstance", reflect.TypeOf((*MockCluster)(nil).RemoveInstance), clusterKey, checksum, instance)
}

// MockDomain is a mock of Domain interface
type MockDomain struct {
	ctrl     *gomock.Controller
	recorder *MockDomainMockRecorder
}

// MockDomainMockRecorder is the mock recorder for MockDomain
type MockDomainMockRecorder struct {
	mock *MockDomain
}

// NewMockDomain creates a new mock instance
func NewMockDomain(ctrl *gomock.Controller) *MockDomain {
	mock := &MockDomain{ctrl: ctrl}
	mock.recorder = &MockDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDomain) EXPECT() *MockDomainMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *MockDomain) Index(filters ...DomainFilter) (api.Domains, error) {
	varargs := []interface{}{}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Index", varargs...)
	ret0, _ := ret[0].(api.Domains)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index
func (mr *MockDomainMockRecorder) Index(filters ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockDomain)(nil).Index), filters...)
}

// Get mocks base method
func (m *MockDomain) Get(domainKey api.DomainKey) (api.Domain, error) {
	ret := m.ctrl.Call(m, "Get", domainKey)
	ret0, _ := ret[0].(api.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDomainMockRecorder) Get(domainKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDomain)(nil).Get), domainKey)
}

// Create mocks base method
func (m *MockDomain) Create(domain api.Domain) (api.Domain, error) {
	ret := m.ctrl.Call(m, "Create", domain)
	ret0, _ := ret[0].(api.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockDomainMockRecorder) Create(domain interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDomain)(nil).Create), domain)
}

// Modify mocks base method
func (m *MockDomain) Modify(domain api.Domain) (api.Domain, error) {
	ret := m.ctrl.Call(m, "Modify", domain)
	ret0, _ := ret[0].(api.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Modify indicates an expected call of Modify
func (mr *MockDomainMockRecorder) Modify(domain interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockDomain)(nil).Modify), domain)
}

// Delete mocks base method
func (m *MockDomain) Delete(domainKey api.DomainKey, checksum api.Checksum) error {
	ret := m.ctrl.Call(m, "Delete", domainKey, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDomainMockRecorder) Delete(domainKey, checksum interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDomain)(nil).Delete), domainKey, checksum)
}

// MockProxy is a mock of Proxy interface
type MockProxy struct {
	ctrl     *gomock.Controller
	recorder *MockProxyMockRecorder
}

// MockProxyMockRecorder is the mock recorder for MockProxy
type MockProxyMockRecorder struct {
	mock *MockProxy
}

// NewMockProxy creates a new mock instance
func NewMockProxy(ctrl *gomock.Controller) *MockProxy {
	mock := &MockProxy{ctrl: ctrl}
	mock.recorder = &MockProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProxy) EXPECT() *MockProxyMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *MockProxy) Index(filters ...ProxyFilter) (api.Proxies, error) {
	varargs := []interface{}{}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Index", varargs...)
	ret0, _ := ret[0].(api.Proxies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index
func (mr *MockProxyMockRecorder) Index(filters ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockProxy)(nil).Index), filters...)
}

// Get mocks base method
func (m *MockProxy) Get(proxyKey api.ProxyKey) (api.Proxy, error) {
	ret := m.ctrl.Call(m, "Get", proxyKey)
	ret0, _ := ret[0].(api.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockProxyMockRecorder) Get(proxyKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProxy)(nil).Get), proxyKey)
}

// Create mocks base method
func (m *MockProxy) Create(proxy api.Proxy) (api.Proxy, error) {
	ret := m.ctrl.Call(m, "Create", proxy)
	ret0, _ := ret[0].(api.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockProxyMockRecorder) Create(proxy interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProxy)(nil).Create), proxy)
}

// Modify mocks base method
func (m *MockProxy) Modify(proxy api.Proxy) (api.Proxy, error) {
	ret := m.ctrl.Call(m, "Modify", proxy)
	ret0, _ := ret[0].(api.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Modify indicates an expected call of Modify
func (mr *MockProxyMockRecorder) Modify(proxy interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockProxy)(nil).Modify), proxy)
}

// Delete mocks base method
func (m *MockProxy) Delete(proxyKey api.ProxyKey, checksum api.Checksum) error {
	ret := m.ctrl.Call(m, "Delete", proxyKey, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockProxyMockRecorder) Delete(proxyKey, checksum interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProxy)(nil).Delete), proxyKey, checksum)
}

// MockSharedRules is a mock of SharedRules interface
type MockSharedRules struct {
	ctrl     *gomock.Controller
	recorder *MockSharedRulesMockRecorder
}

// MockSharedRulesMockRecorder is the mock recorder for MockSharedRules
type MockSharedRulesMockRecorder struct {
	mock *MockSharedRules
}

// NewMockSharedRules creates a new mock instance
func NewMockSharedRules(ctrl *gomock.Controller) *MockSharedRules {
	mock := &MockSharedRules{ctrl: ctrl}
	mock.recorder = &MockSharedRulesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSharedRules) EXPECT() *MockSharedRulesMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *MockSharedRules) Index(filters ...SharedRulesFilter) (api.SharedRulesSlice, error) {
	varargs := []interface{}{}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Index", varargs...)
	ret0, _ := ret[0].(api.SharedRulesSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index
func (mr *MockSharedRulesMockRecorder) Index(filters ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockSharedRules)(nil).Index), filters...)
}

// Get mocks base method
func (m *MockSharedRules) Get(sharedRulesKey api.SharedRulesKey) (api.SharedRules, error) {
	ret := m.ctrl.Call(m, "Get", sharedRulesKey)
	ret0, _ := ret[0].(api.SharedRules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSharedRulesMockRecorder) Get(sharedRulesKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSharedRules)(nil).Get), sharedRulesKey)
}

// Create mocks base method
func (m *MockSharedRules) Create(route api.SharedRules) (api.SharedRules, error) {
	ret := m.ctrl.Call(m, "Create", route)
	ret0, _ := ret[0].(api.SharedRules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSharedRulesMockRecorder) Create(route interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSharedRules)(nil).Create), route)
}

// Modify mocks base method
func (m *MockSharedRules) Modify(route api.SharedRules) (api.SharedRules, error) {
	ret := m.ctrl.Call(m, "Modify", route)
	ret0, _ := ret[0].(api.SharedRules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Modify indicates an expected call of Modify
func (mr *MockSharedRulesMockRecorder) Modify(route interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockSharedRules)(nil).Modify), route)
}

// Delete mocks base method
func (m *MockSharedRules) Delete(sharedRulesKey api.SharedRulesKey, checksum api.Checksum) error {
	ret := m.ctrl.Call(m, "Delete", sharedRulesKey, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSharedRulesMockRecorder) Delete(sharedRulesKey, checksum interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSharedRules)(nil).Delete), sharedRulesKey, checksum)
}

// MockRoute is a mock of Route interface
type MockRoute struct {
	ctrl     *gomock.Controller
	recorder *MockRouteMockRecorder
}

// MockRouteMockRecorder is the mock recorder for MockRoute
type MockRouteMockRecorder struct {
	mock *MockRoute
}

// NewMockRoute creates a new mock instance
func NewMockRoute(ctrl *gomock.Controller) *MockRoute {
	mock := &MockRoute{ctrl: ctrl}
	mock.recorder = &MockRouteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoute) EXPECT() *MockRouteMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *MockRoute) Index(filters ...RouteFilter) (api.Routes, error) {
	varargs := []interface{}{}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Index", varargs...)
	ret0, _ := ret[0].(api.Routes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index
func (mr *MockRouteMockRecorder) Index(filters ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockRoute)(nil).Index), filters...)
}

// Get mocks base method
func (m *MockRoute) Get(routeKey api.RouteKey) (api.Route, error) {
	ret := m.ctrl.Call(m, "Get", routeKey)
	ret0, _ := ret[0].(api.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRouteMockRecorder) Get(routeKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoute)(nil).Get), routeKey)
}

// Create mocks base method
func (m *MockRoute) Create(route api.Route) (api.Route, error) {
	ret := m.ctrl.Call(m, "Create", route)
	ret0, _ := ret[0].(api.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockRouteMockRecorder) Create(route interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoute)(nil).Create), route)
}

// Modify mocks base method
func (m *MockRoute) Modify(route api.Route) (api.Route, error) {
	ret := m.ctrl.Call(m, "Modify", route)
	ret0, _ := ret[0].(api.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Modify indicates an expected call of Modify
func (mr *MockRouteMockRecorder) Modify(route interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockRoute)(nil).Modify), route)
}

// Delete mocks base method
func (m *MockRoute) Delete(routeKey api.RouteKey, checksum api.Checksum) error {
	ret := m.ctrl.Call(m, "Delete", routeKey, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRouteMockRecorder) Delete(routeKey, checksum interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoute)(nil).Delete), routeKey, checksum)
}

// MockZone is a mock of Zone interface
type MockZone struct {
	ctrl     *gomock.Controller
	recorder *MockZoneMockRecorder
}

// MockZoneMockRecorder is the mock recorder for MockZone
type MockZoneMockRecorder struct {
	mock *MockZone
}

// NewMockZone creates a new mock instance
func NewMockZone(ctrl *gomock.Controller) *MockZone {
	mock := &MockZone{ctrl: ctrl}
	mock.recorder = &MockZoneMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZone) EXPECT() *MockZoneMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *MockZone) Index(filters ...ZoneFilter) (api.Zones, error) {
	varargs := []interface{}{}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Index", varargs...)
	ret0, _ := ret[0].(api.Zones)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index
func (mr *MockZoneMockRecorder) Index(filters ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockZone)(nil).Index), filters...)
}

// Get mocks base method
func (m *MockZone) Get(zoneKey api.ZoneKey) (api.Zone, error) {
	ret := m.ctrl.Call(m, "Get", zoneKey)
	ret0, _ := ret[0].(api.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockZoneMockRecorder) Get(zoneKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockZone)(nil).Get), zoneKey)
}

// Create mocks base method
func (m *MockZone) Create(zone api.Zone) (api.Zone, error) {
	ret := m.ctrl.Call(m, "Create", zone)
	ret0, _ := ret[0].(api.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockZoneMockRecorder) Create(zone interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockZone)(nil).Create), zone)
}

// Modify mocks base method
func (m *MockZone) Modify(zone api.Zone) (api.Zone, error) {
	ret := m.ctrl.Call(m, "Modify", zone)
	ret0, _ := ret[0].(api.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Modify indicates an expected call of Modify
func (mr *MockZoneMockRecorder) Modify(zone interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockZone)(nil).Modify), zone)
}

// Delete mocks base method
func (m *MockZone) Delete(zoneKey api.ZoneKey, checksum api.Checksum) error {
	ret := m.ctrl.Call(m, "Delete", zoneKey, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockZoneMockRecorder) Delete(zoneKey, checksum interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockZone)(nil).Delete), zoneKey, checksum)
}
