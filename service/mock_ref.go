// Code generated by MockGen. DO NOT EDIT.
// Source: ref.go

// Package service is a generated GoMock package.
package service

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/turbinelabs/api"
	reflect "reflect"
)

// MockProxyRef is a mock of ProxyRef interface
type MockProxyRef struct {
	ctrl     *gomock.Controller
	recorder *MockProxyRefMockRecorder
}

// MockProxyRefMockRecorder is the mock recorder for MockProxyRef
type MockProxyRefMockRecorder struct {
	mock *MockProxyRef
}

// NewMockProxyRef creates a new mock instance
func NewMockProxyRef(ctrl *gomock.Controller) *MockProxyRef {
	mock := &MockProxyRef{ctrl: ctrl}
	mock.recorder = &MockProxyRefMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProxyRef) EXPECT() *MockProxyRefMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockProxyRef) Get(arg0 All) (api.Proxy, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(api.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockProxyRefMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProxyRef)(nil).Get), arg0)
}

// Name mocks base method
func (m *MockProxyRef) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockProxyRefMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockProxyRef)(nil).Name))
}

// ZoneRef mocks base method
func (m *MockProxyRef) ZoneRef() ZoneRef {
	ret := m.ctrl.Call(m, "ZoneRef")
	ret0, _ := ret[0].(ZoneRef)
	return ret0
}

// ZoneRef indicates an expected call of ZoneRef
func (mr *MockProxyRefMockRecorder) ZoneRef() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZoneRef", reflect.TypeOf((*MockProxyRef)(nil).ZoneRef))
}

// MapKey mocks base method
func (m *MockProxyRef) MapKey() string {
	ret := m.ctrl.Call(m, "MapKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// MapKey indicates an expected call of MapKey
func (mr *MockProxyRefMockRecorder) MapKey() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapKey", reflect.TypeOf((*MockProxyRef)(nil).MapKey))
}

// MockZoneRef is a mock of ZoneRef interface
type MockZoneRef struct {
	ctrl     *gomock.Controller
	recorder *MockZoneRefMockRecorder
}

// MockZoneRefMockRecorder is the mock recorder for MockZoneRef
type MockZoneRefMockRecorder struct {
	mock *MockZoneRef
}

// NewMockZoneRef creates a new mock instance
func NewMockZoneRef(ctrl *gomock.Controller) *MockZoneRef {
	mock := &MockZoneRef{ctrl: ctrl}
	mock.recorder = &MockZoneRefMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZoneRef) EXPECT() *MockZoneRefMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockZoneRef) Get(arg0 All) (api.Zone, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(api.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockZoneRefMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockZoneRef)(nil).Get), arg0)
}

// Name mocks base method
func (m *MockZoneRef) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockZoneRefMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockZoneRef)(nil).Name))
}
