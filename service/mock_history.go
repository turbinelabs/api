// Code generated by MockGen. DO NOT EDIT.
// Source: history.go

// Package service is a generated GoMock package.
package service

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/turbinelabs/api"
	changelog "github.com/turbinelabs/api/service/changelog"
	reflect "reflect"
	time "time"
)

// MockHistory is a mock of History interface
type MockHistory struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryMockRecorder
}

// MockHistoryMockRecorder is the mock recorder for MockHistory
type MockHistoryMockRecorder struct {
	mock *MockHistory
}

// NewMockHistory creates a new mock instance
func NewMockHistory(ctrl *gomock.Controller) *MockHistory {
	mock := &MockHistory{ctrl: ctrl}
	mock.recorder = &MockHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHistory) EXPECT() *MockHistoryMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *MockHistory) Index(filters changelog.FilterExpr, start, end time.Time) ([]api.ChangeDescription, error) {
	ret := m.ctrl.Call(m, "Index", filters, start, end)
	ret0, _ := ret[0].([]api.ChangeDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index
func (mr *MockHistoryMockRecorder) Index(filters, start, end interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockHistory)(nil).Index), filters, start, end)
}

// DomainGraph mocks base method
func (m *MockHistory) DomainGraph(domainKey api.DomainKey, start, stop time.Time) ([]api.ChangeDescription, error) {
	ret := m.ctrl.Call(m, "DomainGraph", domainKey, start, stop)
	ret0, _ := ret[0].([]api.ChangeDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainGraph indicates an expected call of DomainGraph
func (mr *MockHistoryMockRecorder) DomainGraph(domainKey, start, stop interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainGraph", reflect.TypeOf((*MockHistory)(nil).DomainGraph), domainKey, start, stop)
}

// RouteGraph mocks base method
func (m *MockHistory) RouteGraph(routeKey api.RouteKey, start, stop time.Time) ([]api.ChangeDescription, error) {
	ret := m.ctrl.Call(m, "RouteGraph", routeKey, start, stop)
	ret0, _ := ret[0].([]api.ChangeDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteGraph indicates an expected call of RouteGraph
func (mr *MockHistoryMockRecorder) RouteGraph(routeKey, start, stop interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteGraph", reflect.TypeOf((*MockHistory)(nil).RouteGraph), routeKey, start, stop)
}

// SharedRulesGraph mocks base method
func (m *MockHistory) SharedRulesGraph(sharedRulesKey api.SharedRulesKey, start, stop time.Time) ([]api.ChangeDescription, error) {
	ret := m.ctrl.Call(m, "SharedRulesGraph", sharedRulesKey, start, stop)
	ret0, _ := ret[0].([]api.ChangeDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SharedRulesGraph indicates an expected call of SharedRulesGraph
func (mr *MockHistoryMockRecorder) SharedRulesGraph(sharedRulesKey, start, stop interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharedRulesGraph", reflect.TypeOf((*MockHistory)(nil).SharedRulesGraph), sharedRulesKey, start, stop)
}

// ClusterGraph mocks base method
func (m *MockHistory) ClusterGraph(clusterKey api.ClusterKey, start, stop time.Time) ([]api.ChangeDescription, error) {
	ret := m.ctrl.Call(m, "ClusterGraph", clusterKey, start, stop)
	ret0, _ := ret[0].([]api.ChangeDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterGraph indicates an expected call of ClusterGraph
func (mr *MockHistoryMockRecorder) ClusterGraph(clusterKey, start, stop interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterGraph", reflect.TypeOf((*MockHistory)(nil).ClusterGraph), clusterKey, start, stop)
}

// Zone mocks base method
func (m *MockHistory) Zone(zoneKey api.ZoneKey, start, stop time.Time) ([]api.ChangeDescription, error) {
	ret := m.ctrl.Call(m, "Zone", zoneKey, start, stop)
	ret0, _ := ret[0].([]api.ChangeDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Zone indicates an expected call of Zone
func (mr *MockHistoryMockRecorder) Zone(zoneKey, start, stop interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zone", reflect.TypeOf((*MockHistory)(nil).Zone), zoneKey, start, stop)
}
