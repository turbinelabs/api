// Code generated by MockGen. DO NOT EDIT.
// Source: admin.go

package service

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/turbinelabs/api"
	reflect "reflect"
)

// MockAdmin is a mock of Admin interface
type MockAdmin struct {
	ctrl     *gomock.Controller
	recorder *MockAdminMockRecorder
}

// MockAdminMockRecorder is the mock recorder for MockAdmin
type MockAdminMockRecorder struct {
	mock *MockAdmin
}

// NewMockAdmin creates a new mock instance
func NewMockAdmin(ctrl *gomock.Controller) *MockAdmin {
	mock := &MockAdmin{ctrl: ctrl}
	mock.recorder = &MockAdminMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdmin) EXPECT() *MockAdminMockRecorder {
	return m.recorder
}

// User mocks base method
func (m *MockAdmin) User() User {
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(User)
	return ret0
}

// User indicates an expected call of User
func (mr *MockAdminMockRecorder) User() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockAdmin)(nil).User))
}

// AccessToken mocks base method
func (m *MockAdmin) AccessToken() AccessToken {
	ret := m.ctrl.Call(m, "AccessToken")
	ret0, _ := ret[0].(AccessToken)
	return ret0
}

// AccessToken indicates an expected call of AccessToken
func (mr *MockAdminMockRecorder) AccessToken() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessToken", reflect.TypeOf((*MockAdmin)(nil).AccessToken))
}

// MockUser is a mock of User interface
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *MockUser) Index(filters ...UserFilter) (api.Users, error) {
	varargs := []interface{}{}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Index", varargs...)
	ret0, _ := ret[0].(api.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index
func (mr *MockUserMockRecorder) Index(filters ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockUser)(nil).Index), filters...)
}

// Get mocks base method
func (m *MockUser) Get(userKey api.UserKey) (api.User, error) {
	ret := m.ctrl.Call(m, "Get", userKey)
	ret0, _ := ret[0].(api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUserMockRecorder) Get(userKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUser)(nil).Get), userKey)
}

// Create mocks base method
func (m *MockUser) Create(user api.User) (api.User, error) {
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserMockRecorder) Create(user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), user)
}

// Modify mocks base method
func (m *MockUser) Modify(user api.User) (api.User, error) {
	ret := m.ctrl.Call(m, "Modify", user)
	ret0, _ := ret[0].(api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Modify indicates an expected call of Modify
func (mr *MockUserMockRecorder) Modify(user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockUser)(nil).Modify), user)
}

// Delete mocks base method
func (m *MockUser) Delete(userKey api.UserKey, checksum api.Checksum) error {
	ret := m.ctrl.Call(m, "Delete", userKey, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUserMockRecorder) Delete(userKey, checksum interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUser)(nil).Delete), userKey, checksum)
}

// MockOrg is a mock of Org interface
type MockOrg struct {
	ctrl     *gomock.Controller
	recorder *MockOrgMockRecorder
}

// MockOrgMockRecorder is the mock recorder for MockOrg
type MockOrgMockRecorder struct {
	mock *MockOrg
}

// NewMockOrg creates a new mock instance
func NewMockOrg(ctrl *gomock.Controller) *MockOrg {
	mock := &MockOrg{ctrl: ctrl}
	mock.recorder = &MockOrgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrg) EXPECT() *MockOrgMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *MockOrg) Index(filters ...OrgFilter) (api.Orgs, error) {
	varargs := []interface{}{}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Index", varargs...)
	ret0, _ := ret[0].(api.Orgs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index
func (mr *MockOrgMockRecorder) Index(filters ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockOrg)(nil).Index), filters...)
}

// Get mocks base method
func (m *MockOrg) Get(orgKey api.OrgKey) (api.Org, error) {
	ret := m.ctrl.Call(m, "Get", orgKey)
	ret0, _ := ret[0].(api.Org)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockOrgMockRecorder) Get(orgKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrg)(nil).Get), orgKey)
}

// Create mocks base method
func (m *MockOrg) Create(org api.Org) (api.Org, error) {
	ret := m.ctrl.Call(m, "Create", org)
	ret0, _ := ret[0].(api.Org)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockOrgMockRecorder) Create(org interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrg)(nil).Create), org)
}

// Modify mocks base method
func (m *MockOrg) Modify(org api.Org) (api.Org, error) {
	ret := m.ctrl.Call(m, "Modify", org)
	ret0, _ := ret[0].(api.Org)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Modify indicates an expected call of Modify
func (mr *MockOrgMockRecorder) Modify(org interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockOrg)(nil).Modify), org)
}

// Delete mocks base method
func (m *MockOrg) Delete(orgKey api.OrgKey, checksum api.Checksum) error {
	ret := m.ctrl.Call(m, "Delete", orgKey, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockOrgMockRecorder) Delete(orgKey, checksum interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrg)(nil).Delete), orgKey, checksum)
}

// MockAccessToken is a mock of AccessToken interface
type MockAccessToken struct {
	ctrl     *gomock.Controller
	recorder *MockAccessTokenMockRecorder
}

// MockAccessTokenMockRecorder is the mock recorder for MockAccessToken
type MockAccessTokenMockRecorder struct {
	mock *MockAccessToken
}

// NewMockAccessToken creates a new mock instance
func NewMockAccessToken(ctrl *gomock.Controller) *MockAccessToken {
	mock := &MockAccessToken{ctrl: ctrl}
	mock.recorder = &MockAccessTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccessToken) EXPECT() *MockAccessTokenMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *MockAccessToken) Index(filters ...AccessTokenFilter) (api.AccessTokens, error) {
	varargs := []interface{}{}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Index", varargs...)
	ret0, _ := ret[0].(api.AccessTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index
func (mr *MockAccessTokenMockRecorder) Index(filters ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockAccessToken)(nil).Index), filters...)
}

// Get mocks base method
func (m *MockAccessToken) Get(key api.AccessTokenKey) (api.AccessToken, error) {
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(api.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockAccessTokenMockRecorder) Get(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccessToken)(nil).Get), key)
}

// Create mocks base method
func (m *MockAccessToken) Create(token api.AccessToken) (api.AccessToken, error) {
	ret := m.ctrl.Call(m, "Create", token)
	ret0, _ := ret[0].(api.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockAccessTokenMockRecorder) Create(token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccessToken)(nil).Create), token)
}

// Delete mocks base method
func (m *MockAccessToken) Delete(key api.AccessTokenKey, checksum api.Checksum) error {
	ret := m.ctrl.Call(m, "Delete", key, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAccessTokenMockRecorder) Delete(key, checksum interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccessToken)(nil).Delete), key, checksum)
}
