// Automatically generated by MockGen. DO NOT EDIT!
// Source: admin.go

package service

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/turbinelabs/api"
)

// Mock of Admin interface
type MockAdmin struct {
	ctrl     *gomock.Controller
	recorder *_MockAdminRecorder
}

// Recorder for MockAdmin (not exported)
type _MockAdminRecorder struct {
	mock *MockAdmin
}

func NewMockAdmin(ctrl *gomock.Controller) *MockAdmin {
	mock := &MockAdmin{ctrl: ctrl}
	mock.recorder = &_MockAdminRecorder{mock}
	return mock
}

func (_m *MockAdmin) EXPECT() *_MockAdminRecorder {
	return _m.recorder
}

func (_m *MockAdmin) User() User {
	ret := _m.ctrl.Call(_m, "User")
	ret0, _ := ret[0].(User)
	return ret0
}

func (_mr *_MockAdminRecorder) User() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "User")
}

// Mock of User interface
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *_MockUserRecorder
}

// Recorder for MockUser (not exported)
type _MockUserRecorder struct {
	mock *MockUser
}

func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &_MockUserRecorder{mock}
	return mock
}

func (_m *MockUser) EXPECT() *_MockUserRecorder {
	return _m.recorder
}

func (_m *MockUser) Index(filters ...UserFilter) (api.Users, error) {
	_s := []interface{}{}
	for _, _x := range filters {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Index", _s...)
	ret0, _ := ret[0].(api.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserRecorder) Index(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Index", arg0...)
}

func (_m *MockUser) Get(userKey api.UserKey) (api.User, error) {
	ret := _m.ctrl.Call(_m, "Get", userKey)
	ret0, _ := ret[0].(api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockUser) Create(user api.User) (api.User, error) {
	ret := _m.ctrl.Call(_m, "Create", user)
	ret0, _ := ret[0].(api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockUser) Modify(user api.User) (api.User, error) {
	ret := _m.ctrl.Call(_m, "Modify", user)
	ret0, _ := ret[0].(api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserRecorder) Modify(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Modify", arg0)
}

func (_m *MockUser) Delete(userKey api.UserKey, checksum api.Checksum) error {
	ret := _m.ctrl.Call(_m, "Delete", userKey, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockUserRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}

// Mock of Org interface
type MockOrg struct {
	ctrl     *gomock.Controller
	recorder *_MockOrgRecorder
}

// Recorder for MockOrg (not exported)
type _MockOrgRecorder struct {
	mock *MockOrg
}

func NewMockOrg(ctrl *gomock.Controller) *MockOrg {
	mock := &MockOrg{ctrl: ctrl}
	mock.recorder = &_MockOrgRecorder{mock}
	return mock
}

func (_m *MockOrg) EXPECT() *_MockOrgRecorder {
	return _m.recorder
}

func (_m *MockOrg) Index(filters ...OrgFilter) (api.Orgs, error) {
	_s := []interface{}{}
	for _, _x := range filters {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Index", _s...)
	ret0, _ := ret[0].(api.Orgs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOrgRecorder) Index(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Index", arg0...)
}

func (_m *MockOrg) Get(orgKey api.OrgKey) (api.Org, error) {
	ret := _m.ctrl.Call(_m, "Get", orgKey)
	ret0, _ := ret[0].(api.Org)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOrgRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockOrg) Create(org api.Org) (api.Org, error) {
	ret := _m.ctrl.Call(_m, "Create", org)
	ret0, _ := ret[0].(api.Org)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOrgRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockOrg) Modify(org api.Org) (api.Org, error) {
	ret := _m.ctrl.Call(_m, "Modify", org)
	ret0, _ := ret[0].(api.Org)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOrgRecorder) Modify(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Modify", arg0)
}

func (_m *MockOrg) Delete(orgKey api.OrgKey, checksum api.Checksum) error {
	ret := _m.ctrl.Call(_m, "Delete", orgKey, checksum)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOrgRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}
